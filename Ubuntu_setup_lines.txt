April 2024
Initial configuration of Dell Ubuntu Box


sudo apt update
sudo apt --fix-broken install
sudo apt install vim
sudo apt install screen
sudo apt install git-all
sudo apt-get install curl
sudo apt install build-essential # (this is a gcc thing)
sudo apt-get install manpages-dev
sudo apt-get install gfortran
sudo apt-get install libfftw3-dev libfftw3-doc
sudo apt-get install gmt gmt-dcw gmt-gshhg
sudo apt-get install parallel
sudo apt-get install iotop
sudo apt install tasksel
sudo apt install aria2
sudo apt install openssh-server

I downloaded the miniconda Linux installer and followed the installation instructions for miniconda3

sudo snap install pycharm-community --classic  # install pycharm community version

In my base environment:
sudo apt-get install csh subversion autoconf libtiff5-dev libhdf5-dev wget
sudo apt-get install liblapack-dev
sudo apt-get install libgmt-dev

# To configure the workstation as a server, I installed openssh-server with apt, then used sudo vim /etc/ssh/sshd_config to change to "PasswordAuthentication yes" and restarted the server with "sudo service ssh restart". I then copied a previously created public key from a local machine (from ssh-keygen) using ssh-copy-id user@IP_address with the password. Then I returned to change "PasswordAuthentication no" for safety. After these steps, the remote access through scp and ssh works. 


# Install mamba in base env
conda install -n base -c conda-forge mamba


Then, based on the mac environment for isce2, let's try this in your base environment: 
conda env create -f isce_requirements.yaml  # Creates environment, now in Python 3.11
conda activate isceenv
conda install conda-forge::isce2
conda install pygmt

Then, add a few user-defined paths to your bashrc:
ISCE_HOME=/......./miniconda3/envs/isceenv/lib/python3.11/site-packages/isce/applications
export PATH=$PATH:$ISCE_HOME
export PATH=$PATH:/......../miniconda3/envs/isceenv/lib/python3.11/site-packages/isce/bin
# ISCE CONTRIB
export ISCE_STACK=/......../miniconda3/envs/isceenv/share/isce2/
export PATH=$PATH:/......../miniconda3/envs/isceenv/share/isce2/topsStack
export PYTHONPATH=${PYTHONPATH}:${ISCE_STACK}








January 23, 2020
Initial configuration of the Dell Ubuntu Box, initially on 18.04

The first thing I had to do was manually remove a set of double-quotes from /etc/apt/sources.list, line 52. The quotes were making it impossible to read the deb stable main line.  I could even see the error message pasted across the top of the GUI when I opened Ubuntu Software Center. 
So I typed: 
gedit /etc/apt/sources.list
Then I manually removed the quotes from the last line. 

To configure the system with good UNIX things like vim, screen, git, curl, g++, fftw, gfortran, and GMT, I typed: 
sudo apt update
sudo apt --fix-broken install
sudo apt install vim
sudo apt install screen
sudo apt install git-all
sudo apt-get install curl
sudo apt install build-essential # (this is a gcc thing)
sudo apt-get install manpages-dev
sudo apt-get install gfortran
sudo apt-get install libfftw3-dev libfftw3-doc
sudo apt-get install gmt gmt-dcw gmt-gshhg
sudo apt-get install parallel
sudo apt-get install iotop
sudo apt-get install libncurses5   # for sac
Then I downloaded the miniconda python3.7 Linux installer (docs.conda.io/en/latest/miniconda.html)
I followed the installation instructions for miniconda3
sudo apt install tasksel
sudo snap install pycharm-community --classic  # install pycharm community version

Next, I installed ISCE using conda-forge.

When using anything in conda, I got an SSL handshake error due to issues with DOI internet: SSLError(bad handshake: Error... certificate verify failed))). Same SSL handshake issue actually shows up in a GUI when you check out Firefox in the Ubuntu Software Center (Firefox right click, show details). 
So I added export REQUESTS_CA_BUNDLE='/home/kmaterna/miniconda3/ssl/cacert.pem' to my .bashrc
Then I added a certificate to the list of accepted certs. 
For a https website (like conda's software page, https://repo.anaconda.com/pkgs/main/linux-64/current_repodata.json), I can click on the lock next to the URL in firefox, click 'more info', view the certificate, and export as PEM. 
I manually added the DOIRootCA2 certificate to the end of /home/kmaterna/miniconda3/ssl/cacert.pem
Note: You may have to do this more than once. If "update conda update" actually does any work, it will re-write the .pem file back to defaults, meaning you have to place the DOI cert into the file again. 

# Install mamba in base env
conda install -n base -c conda-forge mamba

Then: 
conda create -n isceenv python=3.7
conda activate isceenv
conda install matplotlib
conda install ipython
conda install -c conda-forge isce2
conda install jupyterlab
mamba install -c conda-forge mintpy
conda install -c conda-forge shapely
pip install netCDF4
pip install Tectonic-Utils




test isce installation:
>ipython
>>>import isce
>>>isce.version.release_version (or isce.release_version)
>>>from stripmapApp import Insar

add $ISCE_HOME to .bashrc by writing: 
export ISCE_HOME=/home/kmaterna/miniconda3/envs/isceenv/lib/python3.7/site-packages/isce/applications
export PATH=$PATH:$ISCE_HOME
# Get access to MDX
export PATH=$PATH:/home/kmaterna/miniconda3/envs/isceenv/lib/python3.7/site-packages/isce/bin

for S1 STACK PROCESSING: 
export PATH=$PATH:/home/kmaterna/miniconda3/envs/isceenv/share/isce2/topsStack


Continuing the ISCE setup: 
To make ISCE run, I had to make a .netrc file in the home directory with my earthdata login and password, for automatic download of SRTM DEM. 
I also had to use my own scripts to create an orbit directory and aux-cal directory for S1A/B.
I also had to download my own S1 data and set up my xml files. After that, I tried "topsApp.py topsapp.xml" and it worked! 

Upgrading isce:
I was never able to do this.  I blew up the isceenv environment and started over. Last done on 11/2/2021.  



INSTALLING GOOGLE EARTH
sudo apt install gdebi-core wget
wget https://dl.google.com/dl/earth/client/current/google-earth-pro-stable_current_amd64.deb
sudo gdebi google-earth-pro-stable_current_amd64.deb


INSTALLING GMTSAR
sudo apt-get install csh subversion autoconf libtiff5-dev libhdf5-dev
sudo apt-get install liblapack-dev
sudo apt-get install libgmt-dev
cd /usr/local
# git clone --version 5.8 https://github.com/gmtsar/gmtsar
# git clone --branch 6.0 https://github.com/gmtsar/gmtsar GMTSAR
follow autoconf/make/install instructions from there. 
# when I upgraded the software to the master branch instead of 6.0 or 6.1, I did this: 
git clone https://github.com/gmtsar/gmtsar GMTSAR (last done 12/13/21)


NOVEMBER 2020: 
PYTHON SETUP ON MAIN CONDA ENVIRONMENT: 
conda install numpy
conda install scipy
conda install -c conda-forge obspy
python -m pip install -U matplotlib
pip install netCDF4
pip install h5py
pip install pandas
pip install xlrd
pip install geojson
pip install Tectonic-Utils


DECEMBER 2020:
By installing Gamma (separate document), I needed to upgrade my entire machine to Ubuntu 20.04. This created a version conflict between GMT5SAR and GMT6 on the machine. Fixed this with new clone of GMTSAR 6.0.0. 

February 2022: 
Installed SAC using the IRIS-emailed tarball for 64-bit Linux. Added 3 lines from their readme to my bash profile.
