useful lines: 

To run unittests: 
python -m unittest 
-> runs unittests for anything inside a package (from the top level directory of the package)

To install a source package locally on your machine:
pip install -e . 
-> from the root of a package, installs the package locally, by laying an egg in your site-packages. This can be used before you upload a package to pip. 

To run a Python code driver.py with performance tracking:
```python -m cProfile -o example2.prof driver.py```
Then you can use ```python -m pstats example2.prof``` to delve into the performance statistics


To package and upload a source package to pip: 
DON'T FORGET: Make sure to change your pyproj.toml to have a new version number. Commit these changes first. 
git tag v0.0.1 (or whatever version you want)
git push
git push origin v0.0.1
poetry build
poetry publish

# Note: For the poetry upload to PyPI, I needed to create an API key on the PyPI website (with 2FA) and then save it locally using poetry config pypi-token.pypi
# Note: poetry works in base conda envrionment



To list your conda environments:
conda env list

To delete a conda environment:
conda env remote ...


To import a python package from somewhere local, not necessarily on your Python path: 
# One example. 
# The location _Project_Code/ does have an __init__.py
>> import sys
>> sys.path.append("../../../_Project_Code/");   # add 'injection_analysis' to path
>> import injection_analysis


To look for a python package everywhere in your computer recursively: 
(base) Kathryns-MacBook-Pro-2:B_Research kmaterna$ grep -r --include=*.py 'downsample_gps_ts.' .



July 2025:
How to download a Copernicus Glo30 DEM over Iceland and convert it to Ellipsoid height for InSAR processing in ISCE: 
sardem --data-source COP --make-isce-xml --output-type FLOAT32 --bbox -24.0 63.6 -19.0 65.9

Under the hood, it's doing gdalwarp from EPSG:4326+3855 to EPSG:4326. It calls the correct syntax. Thank you Scott!!! 
